/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef main_TYPES_H
#define main_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace two {

class User;

class Food;

typedef struct _User__isset {
  _User__isset() : name(false), age(false) {}
  bool name :1;
  bool age :1;
} _User__isset;

class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() noexcept
       : name(),
         age(0) {
  }

  virtual ~User() noexcept;
  std::string name;
  int32_t age;

  _User__isset __isset;

  void __set_name(const std::string& val);

  void __set_age(const int32_t val);

  bool operator == (const User & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

std::ostream& operator<<(std::ostream& out, const User& obj);

typedef struct _Food__isset {
  _Food__isset() : name(false) {}
  bool name :1;
} _Food__isset;

class Food : public virtual ::apache::thrift::TBase {
 public:

  Food(const Food&);
  Food& operator=(const Food&);
  Food() noexcept
       : name() {
  }

  virtual ~Food() noexcept;
  std::string name;

  _Food__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const Food & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Food &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Food & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Food &a, Food &b);

std::ostream& operator<<(std::ostream& out, const Food& obj);

} // namespace

#endif
