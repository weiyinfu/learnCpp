/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Mine_H
#define Mine_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "main_types.h"

namespace two {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MineIf {
 public:
  virtual ~MineIf() {}
  virtual void Get(User& _return, const User& user) = 0;
  virtual void Get2(const User& user) = 0;
  virtual void Get3(User& _return) = 0;
};

class MineIfFactory {
 public:
  typedef MineIf Handler;

  virtual ~MineIfFactory() {}

  virtual MineIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MineIf* /* handler */) = 0;
  };

class MineIfSingletonFactory : virtual public MineIfFactory {
 public:
  MineIfSingletonFactory(const ::std::shared_ptr<MineIf>& iface) : iface_(iface) {}
  virtual ~MineIfSingletonFactory() {}

  virtual MineIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(MineIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<MineIf> iface_;
};

class MineNull : virtual public MineIf {
 public:
  virtual ~MineNull() {}
  void Get(User& /* _return */, const User& /* user */) override {
    return;
  }
  void Get2(const User& /* user */) override {
    return;
  }
  void Get3(User& /* _return */) override {
    return;
  }
};

typedef struct _Mine_Get_args__isset {
  _Mine_Get_args__isset() : user(false) {}
  bool user :1;
} _Mine_Get_args__isset;

class Mine_Get_args {
 public:

  Mine_Get_args(const Mine_Get_args&);
  Mine_Get_args& operator=(const Mine_Get_args&);
  Mine_Get_args() noexcept {
  }

  virtual ~Mine_Get_args() noexcept;
  User user;

  _Mine_Get_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const Mine_Get_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const Mine_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mine_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Mine_Get_pargs {
 public:


  virtual ~Mine_Get_pargs() noexcept;
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Mine_Get_result__isset {
  _Mine_Get_result__isset() : success(false) {}
  bool success :1;
} _Mine_Get_result__isset;

class Mine_Get_result {
 public:

  Mine_Get_result(const Mine_Get_result&);
  Mine_Get_result& operator=(const Mine_Get_result&);
  Mine_Get_result() noexcept {
  }

  virtual ~Mine_Get_result() noexcept;
  User success;

  _Mine_Get_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const Mine_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Mine_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mine_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Mine_Get_presult__isset {
  _Mine_Get_presult__isset() : success(false) {}
  bool success :1;
} _Mine_Get_presult__isset;

class Mine_Get_presult {
 public:


  virtual ~Mine_Get_presult() noexcept;
  User* success;

  _Mine_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Mine_Get2_args__isset {
  _Mine_Get2_args__isset() : user(false) {}
  bool user :1;
} _Mine_Get2_args__isset;

class Mine_Get2_args {
 public:

  Mine_Get2_args(const Mine_Get2_args&);
  Mine_Get2_args& operator=(const Mine_Get2_args&);
  Mine_Get2_args() noexcept {
  }

  virtual ~Mine_Get2_args() noexcept;
  User user;

  _Mine_Get2_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const Mine_Get2_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const Mine_Get2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mine_Get2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Mine_Get2_pargs {
 public:


  virtual ~Mine_Get2_pargs() noexcept;
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Mine_Get2_result {
 public:

  Mine_Get2_result(const Mine_Get2_result&) noexcept;
  Mine_Get2_result& operator=(const Mine_Get2_result&) noexcept;
  Mine_Get2_result() noexcept {
  }

  virtual ~Mine_Get2_result() noexcept;

  bool operator == (const Mine_Get2_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Mine_Get2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mine_Get2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Mine_Get2_presult {
 public:


  virtual ~Mine_Get2_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Mine_Get3_args {
 public:

  Mine_Get3_args(const Mine_Get3_args&) noexcept;
  Mine_Get3_args& operator=(const Mine_Get3_args&) noexcept;
  Mine_Get3_args() noexcept {
  }

  virtual ~Mine_Get3_args() noexcept;

  bool operator == (const Mine_Get3_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Mine_Get3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mine_Get3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Mine_Get3_pargs {
 public:


  virtual ~Mine_Get3_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Mine_Get3_result__isset {
  _Mine_Get3_result__isset() : success(false) {}
  bool success :1;
} _Mine_Get3_result__isset;

class Mine_Get3_result {
 public:

  Mine_Get3_result(const Mine_Get3_result&);
  Mine_Get3_result& operator=(const Mine_Get3_result&);
  Mine_Get3_result() noexcept {
  }

  virtual ~Mine_Get3_result() noexcept;
  User success;

  _Mine_Get3_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const Mine_Get3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Mine_Get3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mine_Get3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Mine_Get3_presult__isset {
  _Mine_Get3_presult__isset() : success(false) {}
  bool success :1;
} _Mine_Get3_presult__isset;

class Mine_Get3_presult {
 public:


  virtual ~Mine_Get3_presult() noexcept;
  User* success;

  _Mine_Get3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MineClient : virtual public MineIf {
 public:
  MineClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MineClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Get(User& _return, const User& user) override;
  void send_Get(const User& user);
  void recv_Get(User& _return);
  void Get2(const User& user) override;
  void send_Get2(const User& user);
  void recv_Get2();
  void Get3(User& _return) override;
  void send_Get3();
  void recv_Get3(User& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MineProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MineIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (MineProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MineProcessor(::std::shared_ptr<MineIf> iface) :
    iface_(iface) {
    processMap_["Get"] = &MineProcessor::process_Get;
    processMap_["Get2"] = &MineProcessor::process_Get2;
    processMap_["Get3"] = &MineProcessor::process_Get3;
  }

  virtual ~MineProcessor() {}
};

class MineProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MineProcessorFactory(const ::std::shared_ptr< MineIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< MineIfFactory > handlerFactory_;
};

class MineMultiface : virtual public MineIf {
 public:
  MineMultiface(std::vector<std::shared_ptr<MineIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MineMultiface() {}
 protected:
  std::vector<std::shared_ptr<MineIf> > ifaces_;
  MineMultiface() {}
  void add(::std::shared_ptr<MineIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Get(User& _return, const User& user) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, user);
    }
    ifaces_[i]->Get(_return, user);
    return;
  }

  void Get2(const User& user) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get2(user);
    }
    ifaces_[i]->Get2(user);
  }

  void Get3(User& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get3(_return);
    }
    ifaces_[i]->Get3(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MineConcurrentClient : virtual public MineIf {
 public:
  MineConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MineConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Get(User& _return, const User& user) override;
  int32_t send_Get(const User& user);
  void recv_Get(User& _return, const int32_t seqid);
  void Get2(const User& user) override;
  int32_t send_Get2(const User& user);
  void recv_Get2(const int32_t seqid);
  void Get3(User& _return) override;
  int32_t send_Get3();
  void recv_Get3(User& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
