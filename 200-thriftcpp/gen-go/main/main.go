// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Haha interface {
  // Parameters:
  //  - S
  Haha(ctx context.Context, s string) (r string, err error)
  // Parameters:
  //  - One
  //  - Two
  Baga(ctx context.Context, one int32, two int32) (r int32, err error)
}

type HahaClient struct {
  c thrift.TClient
}

func NewHahaClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HahaClient {
  return &HahaClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewHahaClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HahaClient {
  return &HahaClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewHahaClient(c thrift.TClient) *HahaClient {
  return &HahaClient{
    c: c,
  }
}

func (p *HahaClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - S
func (p *HahaClient) Haha(ctx context.Context, s string) (r string, err error) {
  var _args0 HahaHahaArgs
  _args0.S = s
  var _result1 HahaHahaResult
  if err = p.Client_().Call(ctx, "haha", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - One
//  - Two
func (p *HahaClient) Baga(ctx context.Context, one int32, two int32) (r int32, err error) {
  var _args2 HahaBagaArgs
  _args2.One = one
  _args2.Two = two
  var _result3 HahaBagaResult
  if err = p.Client_().Call(ctx, "baga", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type HahaProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Haha
}

func (p *HahaProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HahaProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HahaProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHahaProcessor(handler Haha) *HahaProcessor {

  self4 := &HahaProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["haha"] = &hahaProcessorHaha{handler:handler}
  self4.processorMap["baga"] = &hahaProcessorBaga{handler:handler}
return self4
}

func (p *HahaProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type hahaProcessorHaha struct {
  handler Haha
}

func (p *hahaProcessorHaha) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HahaHahaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("haha", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HahaHahaResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Haha(ctx, args.S); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing haha: " + err2.Error())
    oprot.WriteMessageBegin("haha", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("haha", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hahaProcessorBaga struct {
  handler Haha
}

func (p *hahaProcessorBaga) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HahaBagaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("baga", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HahaBagaResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Baga(ctx, args.One, args.Two); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing baga: " + err2.Error())
    oprot.WriteMessageBegin("baga", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("baga", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - S
type HahaHahaArgs struct {
  S string
}

func NewHahaHahaArgs() *HahaHahaArgs {
  return &HahaHahaArgs{}
}


func (p *HahaHahaArgs) GetS() string {
  return p.S
}
func (p *HahaHahaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField_1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HahaHahaArgs)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.S = v
}
  return nil
}

func (p *HahaHahaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("haha_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HahaHahaArgs) writeField_1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRING, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:s: ", p), err) }
  if err := oprot.WriteString(string(p.S)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s (-1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:s: ", p), err) }
  return err
}

func (p *HahaHahaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HahaHahaArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HahaHahaResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHahaHahaResult() *HahaHahaResult {
  return &HahaHahaResult{}
}

var HahaHahaResult_Success_DEFAULT string
func (p *HahaHahaResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return HahaHahaResult_Success_DEFAULT
  }
return *p.Success
}
func (p *HahaHahaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HahaHahaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HahaHahaResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *HahaHahaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("haha_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HahaHahaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HahaHahaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HahaHahaResult(%+v)", *p)
}

// Attributes:
//  - One
//  - Two
type HahaBagaArgs struct {
  One int32
  Two int32
}

func NewHahaBagaArgs() *HahaBagaArgs {
  return &HahaBagaArgs{}
}


func (p *HahaBagaArgs) GetOne() int32 {
  return p.One
}

func (p *HahaBagaArgs) GetTwo() int32 {
  return p.Two
}
func (p *HahaBagaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case -2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField_2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HahaBagaArgs)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.One = v
}
  return nil
}

func (p *HahaBagaArgs)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.Two = v
}
  return nil
}

func (p *HahaBagaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("baga_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HahaBagaArgs) writeField_2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("two", thrift.I32, -2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:two: ", p), err) }
  if err := oprot.WriteI32(int32(p.Two)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.two (-2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -2:two: ", p), err) }
  return err
}

func (p *HahaBagaArgs) writeField_1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("one", thrift.I32, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:one: ", p), err) }
  if err := oprot.WriteI32(int32(p.One)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.one (-1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:one: ", p), err) }
  return err
}

func (p *HahaBagaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HahaBagaArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HahaBagaResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHahaBagaResult() *HahaBagaResult {
  return &HahaBagaResult{}
}

var HahaBagaResult_Success_DEFAULT int32
func (p *HahaBagaResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return HahaBagaResult_Success_DEFAULT
  }
return *p.Success
}
func (p *HahaBagaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HahaBagaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HahaBagaResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *HahaBagaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("baga_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HahaBagaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HahaBagaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HahaBagaResult(%+v)", *p)
}


